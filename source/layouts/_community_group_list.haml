:ruby
  # Approximate resulting size of stretchy SVG images
  # (so logos are all around the same visual size)
  total_pixels = 8000

  hide_secondary = false unless defined? hide_secondary
  group_type ||= 'standards'

#quicklinks

  %h2 Category quick links

  %ul
    - data[group_type].each do |name, group|

      %li= link_to name, "##{name.parameterize}"


#project_list

  - data[group_type].each do |name, group|
    - next unless group
    - group.sort_by! { |k, v| k[:name].downcase }.uniq! { |k, v| k[:name].downcase }

    .category{class: "category--#{name.parameterize}"}
      %h2{id: name.parameterize}= name

      .projects

        .primary
          .positionFix

            %ul
              - group.each do |item|
                :ruby
                  image_name = item.image || item.name.parameterize

                  file_root = root + '/source/'

                  svg = file_root + image_path("#{group_type}/#{image_name}.svg")
                        .gsub(/\?.*/, '')
                        .gsub(/^\.\./, '')

                  png = svg.sub(/svg$/, 'png')

                  filename = case
                             when File.exists?(svg)
                               svg
                             when File.exists?(png)
                               png
                             else
                               nil
                             end

                  ext = filename.match(/(svg|png)$/).to_s if filename

                  if ext == 'svg'
                    begin
                      # Viewbox coordinates for stretchy SVGs
                      viewbox = open(filename).read.match(/viewBox="([^"]*)"/)
                      coord = viewbox[1].split(' ').map(&:to_f)

                      aspect = (coord[3] - coord[1]) / (coord[2] - coord[0])

                      # "Multiplier effect"
                      # (a scale nudge based on type of image)
                      mult = case
                             when aspect > 1
                               # Longer than wide
                               0.8
                             when aspect == 1
                               # Square (or circle)
                               0.9
                             else
                               # All else (wider than long)
                               1
                             end

                      # Calculate width based on algebra â€”
                      # figure out width and height based on pixel count
                      # and ratio of dimensions
                      # (Height is set to auto in the CSS; to maintain aspect)
                      svg_width = (Math.sqrt(total_pixels/aspect) * mult).to_i
                    rescue
                    end
                  end

                - if filename
                  %li= link_to image_tag("#{group_type}/#{image_name}.#{ext}", alt: item.name, width: svg_width), item.url, class: "item-#{image_name} type-#{ext}", target: "_blank"


      - unless hide_secondary
        .secondary
          %ul
            - group.each do |item|
              %li= link_to item.name, item.url


      %a.top(href="#quicklinks")
        Back to top
