---
title: Speaking Engagements
---

:markdown
  # Speaking Engagements

  Our employees give talks and host events related to their work in open source. Want to learn more about Red Hatâ€™s participation as a catalyst in communities? Come to one of these upcoming events!

  [Subscribe to all Red Hat events](/calendar/all.ics) in your calendar.


:ruby

  require 'chronic'

  # Local helper for markdown-izing text
  def markdown content
    Tilt['markdown'].new { content }.render if content
  end

  # Local helper to look up timezones
  def tz_lookup time_zone
    return @tzc[time_zone] || time_zone if defined? @tzc

    ## Build timezone abbriviation dictionary
    @tzc ||= {}

    # Prioritize US & Indian timezones
    (ActiveSupport::TimeZone.us_zones + [ActiveSupport::TimeZone.new('Asia/Kolkata')] + ActiveSupport::TimeZone.all).each do | zone|
      daylight_abbr = zone.parse('Aug 1').strftime('%Z')
      standard_abbr = zone.parse('Dec 1').strftime('%Z')

      # It's important to give priority to "standard" time,
      # as there are some clashes
      # (Sadly, that's just the way it is)
      @tzc[standard_abbr] = zone.name unless @tzc[standard_abbr]
      @tzc[daylight_abbr] = zone.name unless @tzc[daylight_abbr]
    end

    tz_lookup time_zone
  end

  def strftime_zone time_string, time_zone = "UTC", time_fmt
    old_zone = Time.zone rescue "UTC"
    Time.zone = tz_lookup time_zone rescue "UTC"

    #result = time_string.to_time.getlocal.strftime(time_fmt)
    result = Time.zone.parse(time_string).strftime(time_fmt)

    Time.zone = old_zone

    result
  end

  current_events = []

  # Filter events to only include today + future events
  current_events = data.events.each_with_object({}) do |(year_name, year), h|
    current_time = Time.now

    h[year_name] = year.select do |conf_slug, conf|
      matches = false

      matches = true if Chronic::parse(conf.end || conf.start) >= current_time

      if conf.talks and not matches
        conf.talks.each do |talk|
          if talk.end && Chronic::parse(talk.end) >= current_time
            matches = true
          end
        end
      end

      matches
    end
  end


#quicklinks
  %h2
    Quicklinks

  - current_events.each do |year_name, year|

    %ul

      - year.each do |conf_slug, conf|

        %li
          %a{:href => "##{conf_slug.parameterize}"}
            = conf.name

#all-events

  - current_events.each do |year_name, year|

    - year.each do |conf_slug, conf|

      -# FIXME: Fix the date
      .conference{"data-expired" => "false", "data-start" => conf.start}
        %a.top{:href => "#quicklinks"}Back to top

        .vevent
          %h2.event.summary{:id => conf_slug.parameterize}
            %a{:href => "##{conf_slug.parameterize}", :title => "Link to this conference directly"}
              = conf.name

          .conference-info
            %h3.location
              %a{:href => "https://maps.google.com/maps?q=" + conf.location, :target => "_blank"}
                = conf.location

            %h3.date
              %abbr.dtstart{:title => conf.start}= conf.start
              %abbr.dtend.hidden{:title => conf.start || conf.end}= conf.end || conf.start

            .description
              = markdown conf.description


        - if conf.talks

          - conf.talks.each do |talk|

            - talk_slug = "#{conf_slug.parameterize}--#{talk.title.parameterize}"

            .vevent.talk

              %h3.summary{:id => talk_slug}
                %a{:href => "##{talk_slug}"}
                  = talk.title

              %h4.location.hidden
                %a{:href => "https://maps.google.com/maps?q=" + conf.location, :target => "_blank"}

              %h4.speaker= talk.speaker

              - if talk.location
                %h4.location= talk.location

              - if talk.start
                %h4.time
                  -# FIXME: Deal with local timezones
                  - timezone = talk.timezone || conf.timezone || tz_lookup(talk.start[/[a-zA-Z+0-9:]+$/])

                  - if talk.end
                    %abbr.dtstart{:title => talk.start.to_time.iso8601}
                      = strftime_zone talk.start, timezone, '%a %e %b %Y %l:%M%P'
                    &ndash;
                    %abbr.dtend{:title => talk.start.to_time.iso8601}
                      = strftime_zone talk.end, timezone, '%l:%M%P %Z'

                  - else
                    %abbr.dtstart{:title => talk.start.to_time.iso8601}
                      = strftime_zone talk.start, timezone, '%a %e %b %Y %l:%M%P %Z'

              .description
                %p.hidden.speaker-hidden
                  %b= "Speaker: #{talk.speaker}"

                = markdown talk.description
