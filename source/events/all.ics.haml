---
layout: false
index: false
---

- if data[:events]

  :ruby
    require 'icalendar'
    require 'date'
    require 'nokogiri'
    require 'chronic'

    ######################################################################

    cal = Icalendar::Calendar.new

    cal.x_wr_calname = data.site.name

    confs_match(data.site.events_filter).each do |year_label, year|

      if year_label[/\d{4}/]

        year.each do |conf_label, conf|

          conference = Icalendar::Event.new

          conference.uid = conference.uid.gsub(/@.*/, "@#{data.site.domain}")

          conference.summary     = conf.name
          conference.location    = conf.location
          conference.description = markdown_to_plaintext conf.description

          conference.start = conf.start

          # DTEND is unintuitively day + 1 (next day) for date-only events
          # according to RFC 5545 section 3.6.1 (page 53)
          conference.end   = conf.end + 1 if conf.end

          if conf.talks
            talk_times = []

            conf.talks.each do |talk|
              next unless is_relevant_talk(data.site.events_filter, conf, talk)

              event = Icalendar::Event.new

              event.uid = event.uid.gsub(/@.*/, "@#{data.site.domain}")

              description_text = "Speaker: #{talk.speaker}\n\n#{talk.description.to_s.strip}"

              event.summary     = talk.title.gsub(/:/, '\\:')
              event.location    = talk.location || conf.location
              event.description = markdown_to_plaintext description_text

              if talk.start && talk.end
                timezone = tz_lookup(talk.timezone || conf.timezone || talk.start[/[a-zA-Z+0-9:]+$/])

                # Workaround for IST collision
                if talk.start =~ /IST$/ && event.location =~ /UK|United Kingdom|Dublin|Edinburgh|Ireland/i
                  timezone = "Europe/Dublin"
                elsif talk.start =~ /IST$/
                  timezone = "Asia/Kolkata"
                end

                event.start = vcal_time talk.start, timezone
                event.end   = vcal_time talk.end, timezone

                # Keep track of all talk times, so conf. dates can be optional
                talk_times.push event.start
                talk_times.push event.end

                # Only add talks with date and time
                # There are some TBA events that are displayed,
                # but those don't belong in an .ics file
                cal.add_event(event)
              end
            end

            # Rewrite conference start and end based on talks,
            # if start and end times were not given
            if talk_times.min && !conference.start
              conference.start = talk_times.min.split(/T/).first.to_date
            end
            if talk_times.max && !conference.end
              conference.end = talk_times.max.split(/T/).first.to_date + 1
            end

          end

          cal.add_event(conference)
        end

      end

    end

  = cal.to_ical.gsub(/(BEGIN:VEVENT)/, "\n\\0").gsub(/\r\n/, "\n")
