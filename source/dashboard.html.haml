-#######################################################################
-# Ruby helper functions, used in the HAML below
-#######################################################################

:ruby
  require 'sass'

  # General chart options
  # See http://www.chartjs.org/docs/#chart-configuration-creating-a-chart-with-options
  optionsLine = {
    animation: false,
    title:     {display: false},
    legend:    {position: 'bottom'},
    scales:    {xAxes: [{display: false}]},
    fill:      false,
  }

  # In CoffeeScript, this gets merged with the above options
  optionsLineSimple = {
    legend: {display: false},
    scales: {xAxes: [{display: false}], yAxes: [{display: false}]},
    fill:   true,
  }

  # Helper to easily do SASS from within Ruby
  def sass(cmd)
    Sass::Script::Parser.parse(cmd, 0, 0).perform(Sass::Environment.new).to_s
  end

  # Defined colors
  # (specifically chosen for colorblind contrast)
  color = {
    red:     '#d91515',
    blue:    '#0097ff',
    green:   '#00720d',
    orange:  '#ffa143',
    purple:  '#d71ecd',
    pink:    '#ff00e8',
    teal:    '#088',
    grey:    '#aaa',
  }

  # Extend color with light and dark variants
  # (:darkblue, :lightblue, :extradarkblue, :extralightblue, etc.)
  color = color.inject({}) do |h, (k, v)|
    h[k] = v
    h["dark#{k.to_s}".to_sym]       = sass("darken(#{v}, 10)")
    h["light#{k.to_s}".to_sym]      = sass("lighten(#{v}, 15)")
    h["extradark#{k.to_s}".to_sym]  = sass("mix(#{v}, black, 70)")
    h["extralight#{k.to_s}".to_sym] = sass("mix(#{v}, white, 50)")
    h
  end

  # Generate options for a line graphs
  def chartLine(label, color, info, simple = false)
    opt = {
      data: info,
      fill: false,
      # Override the backgroundColor, since we've set things to not fill
      # and it'd be nice to pass the original color back to the legend
      # as this list is processed, and only a few things escape to the
      # legendTemplate
      backgroundColor: sass("#{color}"),
      borderColor: sass("mix(#{color}, #fff, 40)"),
      label: label,
      originalColor: sass("#{color}"),
      pointBackgroundColor: sass("mix(#{color}, #fff, 70)"),
      pointBorderColor: "transparent",
      pointHoverBackgroundColor: sass("mix(#{color}, #000, 100)"),
      pointHoverBorderColor: sass("mix(#{color}, #000, 100)"),
      pointRadius: 1.5,
      pointHitRadius: 12,
    }

    # Inherit from above and provide some overrides for simple mode
    # (used for contributor growth)
    if simple
      opt.merge({
        fill: true,
        borderWidth: 1,
        pointRadius: 0,
        pointHitRadius: 0,
      })
    else
      opt
    end
  end

  # Generate options for a pie piece
  def chartPie(label, color, info)
    {
      value: info,
      color: sass(color),
      highlight: sass("mix(#{color}, #fff, 75)"),
      label: label
    }
  end

  # Return only last X months (default = 12),
  # minus the current month (which is incomplete in the data)
  def lastMonths(info, months = 12)
    info.last(months + 1).take(months)
  end

-#######################################################################
-# CoffeeScript, to generate the in-page JS
-#######################################################################

- content_for :tail do
  :coffee
    ###
    # Typical options
    ###
    @optionsLine = #{optionsLine.to_json}
    @optionsLineSimple = $.extend true, {}, optionsLine, #{optionsLineSimple.to_json}

    ###
    # Format a string as a sentence
    ###
    @sentence = (string) ->
      string.replace /^(.)/g, (letter) -> letter.toUpperCase()

    ###
    # Given dates, return the duration
    ###
    @getDuration = (dates) ->
      dates.length + ' months'

    ###
    # Common chart creation code, to prevent duplication
    ###
    @chart = (name, type, data, opts = @optionsLine) ->
      canvasElement = $(name).get(0).getContext('2d')

      result = new Chart(canvasElement, {
        type:    type.toLowerCase(),
        data:    data,
        options: opts
      })

      if data.heading
        # For projects that have data for other than 12 months,
        # figure out duration of time and make a string
        if data.labels.length != 12
          duration = ' (' + @getDuration(data.labels) + ')'

        # Prepend (optional) heading
        $(name).before('<h4>' + data.heading + (duration ? '') + '</h4>')

      return chart

-#######################################################################
-# HAML to build the dashboard
-#######################################################################

- if data[:dashboard] and data.dashboard[:projects]

  .dashboard

    -#----------------------------------------------------------
    -# Intro text
    -#----------------------------------------------------------

    #intro
      %h1 #{data.dashboard.index_page.title}

      .summary
        :markdown
          #{data.dashboard.index_page.description}

      - if data.dashboard.projects.size != 1
        %hr


    -#----------------------------------------------------------
    -# Dashboard
    -#----------------------------------------------------------

    #statistics

      -# Iterate through each bit of dashboard data
      -# (located in ../data/dashboard)

      - data.dashboard.projects.each do |label, project|
        - stat = project.stat
        - scm = stat.scm

        .row{class: "dashboard-item dashboard-#{label}"}

          .project-info.col-md-12

            - if data.dashboard.projects.size != 1
              .title
                %h2{id: "#{label}-stats"}
                  = link_to "##{label}-stats" do
                    = image_tag "dashboard/#{label}.svg", alt: project.details.name, class: 'logo'

              - if project.details.summary
                .description= project.details.summary

              - if project.details.site
                .website
                  %strong Site:
                  = link_to project.details.site, project.details.site

          .card.col-md-6.active-new
            %h3 Active &amp; new developers

            .stats
              .year.col-md-6
                .active-year
                  Active this year:
                  %strong= scm.authors_365
                .new-year
                  New this year:
                  %strong= scm.newauthors_365

              .month.col-md-6
                .active-month
                  Active this month:
                  %strong= scm.authors_30
                .new-month
                  New this month:
                  %strong= scm.newauthors_30

                .active-avg
                  Monthly average, active:
                  - aa = lastMonths(project.evol.scm.authors)
                  %strong= (aa.reduce(&:+) / aa.count.to_f).round(1)
                .new-avg
                  Monthly average, new:
                  - na = lastMonths(project.evol.scm.newauthors)
                  %strong= (na.reduce(&:+) / na.count.to_f).round(1)

            %canvas{id: "#{label}Line", width: 900, height: 250, style: "max-width:100%"}

              -# Shove the JS For building the canvas above in the tail end of the page
              - content_for :tail do

                -# Ruby is used internally to generate the data for the cart
                :ruby
                  d = project.evol.scm
                  months = 12

                  info = {
                    labels: lastMonths(d.date, months),
                    datasets: [
                      chartLine('active authors', color[:purple], lastMonths(d.authors, months)),
                      chartLine('new authors (each month)', color[:green], lastMonths(d.newauthors, months)),
                    ]
                  }.to_json

                -# Data above (via Ruby) is exported
                -# and passed to the CoffeeScript-generated JS functions.
                -# (This is what shows up in the rendered page source.)
                :coffee
                  @#{label}Line = @chart("##{label}Line", "Line", #{info})

            -# Growth is similarly generated as above, but is special-cased,
            -# as it's displayed differently

            .growth
              - months = project.evol.scm.date.count - 1
              All-time contributor growth
              = "(over #{months} months)"

              %canvas{id: "#{label}Growth", style: "max-width:100%;"}
                - content_for :tail do
                  :ruby
                    d = project.evol.scm
                    months = d.authors.reject { |d| d == 0 }.count - 1

                    author_count = 0
                    newauthors = d.authors.reject { |d| d == 0 }.inject([]) do |r, el|
                      author_count += el
                      r.push author_count
                    end


                    info = {
                      labels: lastMonths(d.date, months),
                      datasets: [
                        chartLine('new authors', color[:extralightgreen], lastMonths(newauthors, months), 'simple'),
                      ]
                    }.to_json
                  :coffee
                    @#{label}Growth = @chart("##{label}Growth", "Line", #{info}, @optionsLineSimple)

          - if stat.its
            .card.col-md-6
              %h3 Issue tracking

              .stats.center
                Ticket participants:
                %strong= stat.its.allhistory_participants

              %canvas{id: "#{label}bug", width: 900, height: 300, style: "max-width:100%"}
                - content_for :tail do
                  :ruby
                    d = project.evol.its
                    months = d.opened.reject { |d| d == 0 }.count - 1
                    months = 12
                    opened = d.opened
                    closed = d.closed
                    opened_m = lastMonths(d.opened, months)
                    closed_m = lastMonths(d.closed, months)

                    total_opened = opened.inject([]) do |memo, el|
                      memo << (memo.last || 0) + el
                      memo
                    end

                    total_closed = closed.inject([]) do |memo, el|
                      memo << (memo.last || 0) + el
                      memo
                    end

                    total = total_opened.inject([]) do |memo, el|
                      memo << el - total_closed[memo.count]
                      memo
                    end

                    total_m = lastMonths(total, months)

                    info = {
                      heading: 'Bugtracker info',
                      labels: lastMonths(d.date, months),
                      datasets: [
                        chartLine('total', color[:darkred], total_m),
                        chartLine('opened', color[:green], opened_m),
                        chartLine('closed', color[:orange], closed_m),
                      ]
                    }.to_json
                  :coffee
                    @#{label}bug = @chart("##{label}bug", "Line", #{info})

          - if stat.irc
            .card.col-md-6
              %h3 IRC conversions

              .stats
                .col-md-6
                  %h4 People on IRC
                  .people
                    Total:
                    %strong= stat.irc.senders
                  .people-month
                    This month:
                    %strong= stat.irc.senders_30
                  .people-year
                    This year:
                    %strong= stat.irc.senders_365
                .col-md-6
                  %h4 Activity per person
                  .activity
                    Total:
                    - if stat.irc.senders > 0
                      %strong= stat.irc.sent / stat.irc.senders
                    - else
                      %strong 0
                  .activity-month
                    This month:
                    - if stat.irc.senders_30 > 0
                      %strong= stat.irc.sent_30 / stat.irc.senders_30
                    - else
                      %strong 0
                  .activity-year
                    This year:
                    - if stat.irc.senders_365 > 0
                      %strong= stat.irc.sent_365 / stat.irc.senders_365
                    - else
                      %strong 0

              %canvas{id: "#{label}IRCsent", width: 900, height: 220, style: "max-width:100%"}
                - content_for :tail do
                  :ruby
                    d = project.evol.irc
                    months = d.sent.reject { |d| d == 0 }.count - 1
                    months = months > 12 ? 12: months

                    info = {
                      heading: 'Messages sent',
                      labels: lastMonths(d.date, months),
                      datasets: [
                        chartLine('authors', color[:purple], lastMonths(d.sent, months)),
                      ]
                    }.to_json
                  :coffee
                    @#{label}IRCsent = @chart("##{label}IRCsent", "Line", #{info})

              %canvas{id: "#{label}IRC", width: 900, height: 200, style: "max-width:100%"}
                :ruby
                  d = project.evol.irc
                  months = d.senders.reject { |d| d == 0 }.count - 1
                  months = months > 12 ? 12: months

                  i = 0
                  per = d.sent.map do |v|
                    i += 1
                    v == 0 ? 0 : ((v + 0.0) / d.senders[i - 1]).round(1)
                  end

                  info = {
                    heading: 'Active people vs. messages per person',
                    labels: lastMonths(d.date, months),
                    datasets: [
                      chartLine('people', color[:blue], lastMonths(d.senders, months)),
                      chartLine('messages per person', color[:darkred], lastMonths(per, months)),
                    ]
                  }

                - content_for :tail do
                  :coffee
                    @#{label}IRC = @chart("##{label}IRC", "Line", #{info.to_json})


          - if stat.mls
            .card.col-md-6
              %h3 Mailing lists

              .stats.center
                Mailing list participants:
                %strong= stat.mls.senders

              %canvas{id: "#{label}list", width: 900, height: 300, style: "max-width:100%"}
                - content_for :tail do
                  :ruby
                    d = project.evol.mls
                    months = 12

                    info = {
                      heading: 'List stuff',
                      labels: lastMonths(d.date, months),
                      datasets: [
                        chartLine('senders', color[:lightblue], lastMonths(d.senders, months)),
                        chartLine('threads', color[:darkred], lastMonths(d.threads, months)),
                      ]
                    }.to_json
                  :coffee
                    @#{label}list = @chart("##{label}list", "Line", #{info})

          - if stat.qaforums
            .card.col-md-6
              %h3 Forum

              .stats.center
                .qsenders
                  Total people asking questions:
                  %strong= stat.qaforums.qsenders

              %canvas{id: "#{label}forumsent", width: 900, height: 200, style: "max-width:100%"}
                - content_for :tail do
                  :ruby
                    d = project.evol.qaforums
                    months = 12

                    info = {
                      heading: 'New questions vs. answers',
                      labels: lastMonths(d.date, months),
                      datasets: [
                        chartLine('new answers', color[:green], lastMonths(d.asent, months)),
                        chartLine('new questions', color[:lightpink], lastMonths(d.qsent, months)),
                      ]
                    }.to_json
                  :coffee
                    @#{label}forumsent = @chart("##{label}forumsent", "Line", #{info})

          -# Link to the dashboard source
          .col-md-12
            .pull-right= link_to "View the complete #{project.details.name} dashboard&hellip;", project.details.dashboard

- else
  %p
    %strong Error:
    Dashboard data not found.
