:ruby
  pages ||= []
  words ||= {}

  # Stopwords (from PHP)
  stopwords = ["a", "about", "above", "above", "across", "after",
               "afterwards", "again", "against", "all", "almost",
               "alone", "along", "already",
               "also","although","always","am","among", "amongst",
               "amoungst", "amount",  "an", "and", "another",
               "any","anyhow","anyone","anything","anyway", "anywhere",
               "are", "around", "as",  "at", "back","be","became",
               "because","become","becomes", "becoming", "been",
               "before", "beforehand", "behind", "being", "below",
               "beside", "besides", "between", "beyond", "bill", "both",
               "bottom","but", "by", "call", "can", "cannot", "cant",
               "co", "con", "could", "couldnt", "cry", "de", "describe",
               "detail", "do", "done", "down", "due", "during", "each",
               "eg", "eight", "either", "eleven","else", "elsewhere",
               "empty", "enough", "etc", "even", "ever", "every",
               "everyone", "everything", "everywhere", "except", "few",
               "fifteen", "fify", "fill", "find", "fire", "first",
               "five", "for", "former", "formerly", "forty", "found",
               "four", "from", "front", "full", "further", "get",
               "give", "go", "had", "has", "hasnt", "have", "he",
               "hence", "her", "here", "hereafter", "hereby", "herein",
               "hereupon", "hers", "herself", "him", "himself", "his",
               "how", "however", "hundred", "ie", "if", "in", "inc",
               "indeed", "interest", "into", "is", "it", "its",
               "itself", "keep", "last", "latter", "latterly", "least",
               "less", "ltd", "made", "many", "may", "me", "meanwhile",
               "might", "mill", "mine", "more", "moreover", "most",
               "mostly", "move", "much", "must", "my", "myself", "name",
               "namely", "neither", "never", "nevertheless", "next",
               "nine", "no", "nobody", "none", "noone", "nor", "not",
               "nothing", "now", "nowhere", "of", "off", "often", "on",
               "once", "one", "only", "onto", "or", "other", "others",
               "otherwise", "our", "ours", "ourselves", "out", "over",
               "own","part", "per", "perhaps", "please", "put",
               "rather", "re", "same", "see", "seem", "seemed",
               "seeming", "seems", "serious", "several", "she",
               "should", "show", "side", "since", "sincere", "six",
               "sixty", "so", "some", "somehow", "someone", "something",
               "sometime", "sometimes", "somewhere", "still", "such",
               "system", "take", "ten", "than", "that", "the", "their",
               "them", "themselves", "then", "thence", "there",
               "thereafter", "thereby", "therefore", "therein",
               "thereupon", "these", "they", "thickv", "thin", "third",
               "this", "those", "though", "three", "through",
               "throughout", "thru", "thus", "to", "together", "too",
               "top", "toward", "towards", "twelve", "twenty", "two",
               "un", "under", "until", "up", "upon", "us", "very",
               "via", "was", "we", "well", "were", "what", "whatever",
               "when", "whence", "whenever", "where", "whereafter",
               "whereas", "whereby", "wherein", "whereupon", "wherever",
               "whether", "which", "while", "whither", "who", "whoever",
               "whole", "whom", "whose", "why", "will", "with",
               "within", "without", "would", "yet", "you", "your",
               "yours", "yourself", "yourselves", "the"]

  # Cache results in a global session variable (restart session for updates)
  unless defined?($searchdata)

    puts ''

    $htmldocs ||= sitemap.resources.select {|p| p.path.end_with?('.html')}

    total = current = $htmldocs.length

    $htmldocs.each do |page|
      current -= 1

      screen_width = ENV['COLUMNS'] || 72
      progress_string = "Compiling search index"
      console_width = screen_width - progress_string.length - 5
      ratio_done = (total - current).to_f / total.to_f
      bar = "#" * (ratio_done * console_width).to_i
      empty = "-" * ((1 - ratio_done) * console_width).to_i
      print "\r#{progress_string}: #{(ratio_done * 100).to_i}% #{bar}#{empty}"

      # Skip various special pages
      next if page.url.match /^\/search\//
      next if page.url.match /^\/admin\//
      next if page.url.match /^\/404/
      next if page.url.match /^\/$/
      next if page.url.match /^\/blog\/$/
      next if page.url.match /^\/blog\/tag/
      next if page.url.match /^\/blog\/author/
      next if page.url.match /\=/

      page_title = discover_title(page)
      next if page_title == nil

      page_date = defined?(page.date) ? page.date.to_s : nil

      page_id = pages.length
      page_content = defined?(page.body) ? page.body : page.render({layout: false}).sub(page_title, '')

      # Strip HTML (not the best way of doing this, but it's quick)
      page_content.gsub!(/<[^>]*>/, '')

      a = {
        title: page_title,
        url: page.url,
        date: page_date,
        datestring: pretty_date(page_date),
        summary: page_content.split(/\s+/).first(50).join(' ').strip + "â€¦"
      }

      pages.push a

      wordsplit = /[\s\p{punct}]+/

      titlewords = page_title.downcase.split(wordsplit)

      nickname = page.data.author
      author = []

      if nickname
        nickname.downcase.split(' ').each {|n| author.push n}
        author_name(nickname).downcase.split(' ').each {|n| author.push n}
      end

      text = page_content.downcase.split(wordsplit) + titlewords
      text = text.sort.uniq.reject {|w| w.match /[=]/} - stopwords + author

      text.uniq.each do |word|
        next if word.empty? || word.length < 3
        words[word] ||= []
        words[word].push page_id
      end
    end

    puts ''

  end

  $searchdata ||= {pages: pages, words: words}

= $searchdata.to_json
