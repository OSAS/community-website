---
layout: false
---

:ruby
  require 'icalendar'
  require 'date'
  require 'nokogiri'
  require 'chronic'

  #include 'Icalendar' # limit namespace overlap

  ######################################################################

  cal = Icalendar::Calendar.new

  data.events.each do |year_name, year|

    year.each do |conf_slug, conf|

      conference = Icalendar::Event.new

      conference.uid = conference.uid.gsub(/@.*/, "@#{data.site.domain}")

      conference.summary     = conf.name
      conference.location    = conf.location
      conference.description = word_unwrap Nokogiri::HTML(markdown(conf.description)).text

      conference.start = conf.start
      conference.end   = (conf.end || conf.start) # support 1-day confs

      if conf.talks
        talk_times = []

        conf.talks.each do |talk|
          event = Icalendar::Event.new

          event.uid = event.uid.gsub(/@.*/, "@#{data.site.domain}")

          description_text = "Speaker: #{talk.speaker}\n\n#{talk.description.strip}"

          event.summary     = talk.title.gsub(/:/, '\\:')
          event.location    = talk.location || conf.location
          event.description = word_unwrap Nokogiri::HTML(markdown(description_text)).text

          if talk.start && talk.end
            timezone = tz_lookup(talk.timezone || conf.timezone || talk.start[/[a-zA-Z+0-9:]+$/])

            # Workaround for IST collision
            if talk.start =~ /IST$/ && event.location =~ /UK|United Kingdom|Dublin|Edinburgh|Ireland/i
              timezone = "Europe/Dublin"
            elsif talk.start =~ /IST$/
              timezone = "Asia/Kolkata"
            end

            event.start = vcal_time talk.start, timezone
            event.end   = vcal_time talk.end, timezone

            # Keep track of all talk times, so conf. dates can be optional
            talk_times.push event.start
            talk_times.push event.end

            # Only add talks with date and time
            # There are some TBA events that are displayed,
            # but those don't belong in an .ics file
            cal.add_event(event)
          end
        end

        # Rewrite conference start and end based on talks,
        # if start and end times were not given
        if talk_times.min && !conference.start
          conference.start = talk_times.min.split(/T/).first
        end
        if talk_times.max && !conference.end
          conference.end = talk_times.max.split(/T/).first
        end

      end

      cal.add_event(conference)
    end
  end

%pre= cal.to_ical
